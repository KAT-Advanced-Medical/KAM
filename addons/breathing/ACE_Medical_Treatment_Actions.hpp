class ACE_Medical_Treatment_Actions {
    class CheckPulse;
    class Pulseoximeter {
        displayName = CSTRING(Pulseoximeter_Display);
        displayNameProgress = CSTRING(placing);
        category = "examine";
        treatmentLocations = 0;
        allowedSelections[] = {"LeftArm", "RightArm"};
        allowSelfTreatment = 1;
        medicRequired = QGVAR(medLvl_Pulseoximeter);
        treatmentTime = 2;
        items[] = {"kat_Pulseoximeter"};
        condition = "kat_breathing_enable && !(_patient getVariable ['kat_breathing_pulseoximeter', false])";
        callbackSuccess = QFUNC(treatmentAdvanced_pulseoximeter);
        callbackFailure = "";
        callbackProgress = "";
        consumeItem = 1;
        animationPatient = "";
        animationPatientUnconscious = "AinjPpneMstpSnonWrflDnon_rolltoback";
        animationPatientUnconsciousExcludeOn[] = {"ainjppnemstpsnonwrfldnon"};
        animationMedic = "AinvPknlMstpSlayWrflDnon_medicOther";
        animationMedicProne = "AinvPpneMstpSlayW[wpn]Dnon_medicOther";
        animationMedicSelf = "AinvPknlMstpSlayW[wpn]Dnon_medic";
        animationMedicSelfProne = "AinvPpneMstpSlayW[wpn]Dnon_medic";
        litter[] = {};
    };
    class RemovePulseoximeter {
        displayName = CSTRING(Pulseoximeter_Display_Remove);
        displayNameProgress = CSTRING(remove);
        category = "examine";
        treatmentLocations = 0;
        allowedSelections[] = {"LeftArm", "RightArm"};
        allowSelfTreatment = 1;
        medicRequired = QGVAR(medLvl_Pulseoximeter);
        treatmentTime = 2;
        items[] = {};
        condition = QUOTE(_patient getVariable [ARR_2(QQGVAR(pulseoximeter), false)]);
        callbackSuccess = QFUNC(treatmentAdvanced_removePulseoximeter);
        callbackFailure = "";
        callbackProgress = "";
        consumeItem = 0;
        animationPatient = "";
        animationPatientUnconscious = "AinjPpneMstpSnonWrflDnon_rolltoback";
        animationPatientUnconsciousExcludeOn[] = {"ainjppnemstpsnonwrfldnon"};
        animationMedic = "AinvPknlMstpSlayWrflDnon_medicOther";
        animationMedicProne = "AinvPpneMstpSlayW[wpn]Dnon_medicOther";
        animationMedicSelf = "AinvPknlMstpSlayW[wpn]Dnon_medic";
        animationMedicSelfProne = "AinvPpneMstpSlayW[wpn]Dnon_medic";
        litter[] = {};
    };
    class ChestSeal {
        displayName = CSTRING(chestseal_display);
        displayNameProgress = CSTRING(treating);
        category = "airway";
        treatmentLocations = 0;
        allowedSelections[] = {"Body"};
        allowSelfTreatment = QGVAR(enable_selfChestseal);
        medicRequired = QGVAR(medLvl_Chestseal);
        treatmentTime = 7;
        items[] = {"kat_chestSeal"};
        condition = QUOTE(!(_patient getVariable [ARR_2(QQEGVAR(airway,recovery),false)]));
        callbackSuccess = QFUNC(treatmentAdvanced_chestSeal);
        callbackFailure = "";
        callbackProgress = "";
        consumeItem = 1;
        animationPatient = "";
        animationPatientUnconscious = "AinjPpneMstpSnonWrflDnon_rolltoback";
        animationPatientUnconsciousExcludeOn[] = {"ainjppnemstpsnonwrfldnon"};
        animationMedic = "AinvPknlMstpSlayWrflDnon_medicOther";
        animationMedicProne = "AinvPpneMstpSlayW[wpn]Dnon_medicOther";
        animationMedicSelf = "AinvPknlMstpSlayW[wpn]Dnon_medic";
        animationMedicSelfProne = "AinvPpneMstpSlayW[wpn]Dnon_medic";
        litter[] = {};
    };
    class HemopneumothoraxTreatment {
        displayName = CSTRING(hemopneumothorax_display);
        displayNameProgress = CSTRING(treating);
        category = "airway";
        treatmentLocations = 0;
        allowedSelections[] = {"Body"};
        allowSelfTreatment = 0;
        medicRequired = QGVAR(medLvl_hemopneumothoraxTreatment);
        treatmentTime = 7;
        items[] = {"kat_aatKit"};
        condition = QUOTE(!(_patient getVariable [ARR_2(QQEGVAR(airway,recovery),false)]));
        callbackSuccess = QFUNC(treatmentAdvanced_hemopneumothorax);
        callbackFailure = "";
        callbackProgress = "";
        consumeItem = 1;
        animationPatient = "";
        animationPatientUnconscious = "AinjPpneMstpSnonWrflDnon_rolltoback";
        animationPatientUnconsciousExcludeOn[] = {"ainjppnemstpsnonwrfldnon"};
        animationMedic = "AinvPknlMstpSlayWrflDnon_medicOther";
        animationMedicProne = "AinvPpneMstpSlayW[wpn]Dnon_medicOther";
        animationMedicSelf = "AinvPknlMstpSlayW[wpn]Dnon_medic";
        animationMedicSelfProne = "AinvPpneMstpSlayW[wpn]Dnon_medic";
        litter[] = {};
    };
    class TensionpneumothoraxTreatment {
        displayName = CSTRING(tensionpneumothorax_display);
        displayNameProgress = CSTRING(treating);
        category = "airway";
        treatmentLocations = 0;
        allowedSelections[] = {"Body"};
        allowSelfTreatment = 0;
        medicRequired = QGVAR(medLvl_hemopneumothoraxTreatment);
        treatmentTime = 7;
        items[] = {"kat_aatKit"};
        condition = QUOTE(!(_patient getVariable [ARR_2(QQEGVAR(airway,recovery),false)]));
        callbackSuccess = QFUNC(treatmentAdvanced_tensionpneumothorax);
        callbackFailure = "";
        callbackProgress = "";
        consumeItem = 1;
        animationPatient = "";
        animationPatientUnconscious = "AinjPpneMstpSnonWrflDnon_rolltoback";
        animationPatientUnconsciousExcludeOn[] = {"ainjppnemstpsnonwrfldnon"};
        animationMedic = "AinvPknlMstpSlayWrflDnon_medicOther";
        animationMedicProne = "AinvPpneMstpSlayW[wpn]Dnon_medicOther";
        animationMedicSelf = "AinvPknlMstpSlayW[wpn]Dnon_medic";
        animationMedicSelfProne = "AinvPpneMstpSlayW[wpn]Dnon_medic";
        litter[] = {};
    };
    class ncdKit: TensionpneumothoraxTreatment {
        displayName = CSTRING(tensionpneumothoraxNCDKit_display);
        displayNameProgress = CSTRING(treating);
        category = "airway";
        treatmentLocations = 0;
        allowedSelections[] = {"Body"};
        allowSelfTreatment = 0;
        medicRequired = QGVAR(medLvl_hemopneumothoraxTreatment);
        treatmentTime = 7;
        items[] = {"kat_ncdKit"};
        condition = QUOTE(!(_patient getVariable [ARR_2(QQEGVAR(airway,recovery),false)]));
        callbackSuccess = QFUNC(treatmentAdvanced_tensionpneumothorax);
        callbackFailure = "";
        callbackProgress = "";
        consumeItem = 1;
        animationPatient = "";
        animationPatientUnconscious = "AinjPpneMstpSnonWrflDnon_rolltoback";
        animationPatientUnconsciousExcludeOn[] = {"ainjppnemstpsnonwrfldnon"};
        animationMedic = "AinvPknlMstpSlayWrflDnon_medicOther";
        animationMedicProne = "AinvPpneMstpSlayW[wpn]Dnon_medicOther";
        animationMedicSelf = "AinvPknlMstpSlayW[wpn]Dnon_medic";
        animationMedicSelfProne = "AinvPpneMstpSlayW[wpn]Dnon_medic";
        litter[] = {};
    };
    class listentolungs: CheckPulse {
        displayName = CSTRING(auscultateLung_display);
        displayNameProgress = CSTRING(listening_progress);
        treatmentTime = 14;
        allowedSelections[] = {"Body"};
        allowSelfTreatment = 0;
        category = "airway";
        medicRequired = 0;
        consumeItem = 0;
        callbackStart = QUOTE([ARR_2(_medic, _patient)] spawn FUNC(listenLungs));
        callbackSuccess = "";
        callbackProgress = "";
        condition = "true";
        items[] = {"kat_stethoscope"};
        animationPatient = "";
        animationPatientUnconscious = "AinjPpneMstpSnonWrflDnon_rolltoback";
        animationPatientUnconsciousExcludeOn[] = {"ainjppnemstpsnonwrfldnon"};
    };
    class CheckCyanosis: CheckPulse {
        displayName = CSTRING(CheckCyanosis_Name);
        displayNameProgress = CSTRING(CheckCyanosis_Progress);
        treatmentTime = 3;
        allowedSelections[] = {"Head", "LeftArm", "RightArm"};
        allowSelfTreatment = 1;
        medicRequired = QGVAR(medLvl_Cyanosis);
        condition = QUOTE(GVAR(enableCyanosis) && !(GVAR(cyanosisShowInMenu)));
        callbackSuccess = QFUNC(treatmentAdvanced_Cyanosis);
    };

    class AttachBVM {
        displayName = "Put on BVM";//CSTRING(auscultateLung_display);
        displayNameProgress = "Putting on BVM";//CSTRING(listening_progress);
        category = "airway";
        treatmentLocations = 0;
        allowedSelections[] = {"Head"};
        allowSelfTreatment = 0;
        medicRequired = 0;
        treatmentTime = 5;
        consumeItem = 1;
        items[] = {"kat_BVM"};
        condition = QUOTE(!([_patient] call ace_common_fnc_isAwake) && !(_patient call FUNC(hasBVM)));
        callbackSuccess = QUOTE([ARR_2(_patient,false)] call FUNC(attachBVM));
        animationPatient = "";
        animationPatientUnconscious = "AinjPpneMstpSnonWrflDnon_rolltoback";
        animationPatientUnconsciousExcludeOn[] = {"ainjppnemstpsnonwrfldnon"};
        animationMedic = "AinvPknlMstpSlayWrflDnon_medicOther";
        animationMedicProne = "AinvPpneMstpSlayW[wpn]Dnon_medicOther";
        animationMedicSelf = "AinvPknlMstpSlayW[wpn]Dnon_medic";
        animationMedicSelfProne = "AinvPpneMstpSlayW[wpn]Dnon_medic";
        litter[] = {};
    };
    class DetachBVM: AttachBVM {
        displayName = "Take off BVM";//CSTRING(auscultateLung_display);
        displayNameProgress = "Taking off BVM";//CSTRING(listening_progress);
        treatmentTime = 3;
        medicRequired = 0;
        consumeItem = 0;
        items[] = {};
        condition = QUOTE(_patient getVariable [ARR_2(QQGVAR(BVM),false)] && !(_patient getVariable [ARR_2(QQGVAR(BVMInUse),false)]));
        callbackSuccess = QUOTE([ARR_3(_medic,_patient,false)] call FUNC(detachBVM));
    };

    class AttachPocketBVM: AttachBVM {
        displayName = "Put on Pocket BVM";//CSTRING(auscultateLung_display);
        displayNameProgress = "Putting on Pocket BVM";//CSTRING(listening_progress);
        treatmentTime = 5;
        medicRequired = 0;
        consumeItem = 1;
        items[] = {"kat_pocketBVM"};
        callbackSuccess = QUOTE([ARR_2(_patient,true)] call FUNC(attachBVM));
    };

    class DetachPocketBVM: AttachPocketBVM {
        displayName = "Take off Pocket BVM";//CSTRING(auscultateLung_display);
        displayNameProgress = "Taking off Pocket";//CSTRING(listening_progress);
        treatmentTime = 3;
        medicRequired = 0;
        consumeItem = 0;
        items[] = {};
        condition = QUOTE(_patient getVariable [ARR_2(QQGVAR(pocketBVM),false)] && !(_patient getVariable [ARR_2(QQGVAR(BVMInUse),false)]));
        callbackSuccess = QUOTE([ARR_3(_medic,_patient,true)] call FUNC(detachBVM));
    };

    class UseBVM {
        displayName = "Squeeze Self-Inflating Bag";//CSTRING(auscultateLung_display);
        displayNameProgress = "Squeezing Self-Inflating Bag";//CSTRING(listening_progress);
        category = "airway";
        treatmentLocations = 0;
        allowedSelections[] = {"Head"};
        allowSelfTreatment = 0;
        medicRequired = 0;
        treatmentTime = 15;
        consumeItem = 0;
        condition = QUOTE(!(_patient call ace_common_fnc_isAwake) && (_patient call FUNC(hasBVM)) && !(_patient getVariable [ARR_2(QQGVAR(BVMInUse),false)]));
        callbackStart = QUOTE([ARR_3(_patient, _medic, true)] call FUNC(handleBVMUsage));
        callbackSuccess = QUOTE([ARR_2(_patient, _medic)] call FUNC(handleBVMUsage));
        callbackFailure = QUOTE([ARR_2(_patient, _medic)] call FUNC(handleBVMUsage));
        callbackProgress = "";
        animationPatient = "";
        animationPatientUnconscious = "AinjPpneMstpSnonWrflDnon_rolltoback";
        animationPatientUnconsciousExcludeOn[] = {"ainjppnemstpsnonwrfldnon"};
        animationMedicProne = "AinvPpneMstpSlayW[wpn]Dnon_medicOther";
        animationMedicSelf = "AinvPknlMstpSlayW[wpn]Dnon_medic";
        animationMedicSelfProne = "AinvPpneMstpSlayW[wpn]Dnon_medic";
        litter[] = {};
    };

    class AttachOxygenTank {
        displayName = "Connect Oxygen to Self-Inflating Bag";//CSTRING(auscultateLung_display);
        displayNameProgress = "Connecting Oxygen";//CSTRING(listening_progress);
        category = "airway";
        treatmentLocations = 0;
        allowedSelections[] = {"Head"};
        allowSelfTreatment = 0;
        medicRequired = 0;
        treatmentTime = 3;
        consumeItem = 1;
        items[] = {};
        //items[] = {"kat_oxygenTank"}; 
        condition = QUOTE((_patient call ACEFUNC(medical_treatment,isInMedicalFacility) || _patient call ACEFUNC(medical_treatment,isInMedicalVehicle)) && !([_patient] call ace_common_fnc_isAwake) && !(_patient getVariable [ARR_2(QQGVAR(BVMInUse),false)]) && _patient getVariable [ARR_2(QQGVAR(BVM),false)] && !(_patient getVariable [ARR_2(QQGVAR(oxygenTankConnected),false)]));
        callbackSuccess = QUOTE([ARR_2(_patient,true)] call FUNC(connectOxygenTank));
        animationPatient = "";
        animationPatientUnconscious = "AinjPpneMstpSnonWrflDnon_rolltoback";
        animationPatientUnconsciousExcludeOn[] = {"ainjppnemstpsnonwrfldnon"};
        animationMedic = "AinvPknlMstpSlayWrflDnon_medicOther";
        animationMedicProne = "AinvPpneMstpSlayW[wpn]Dnon_medicOther";
        animationMedicSelf = "AinvPknlMstpSlayW[wpn]Dnon_medic";
        animationMedicSelfProne = "AinvPpneMstpSlayW[wpn]Dnon_medic";
        litter[] = {};
    };

    class DetachOxygenTank: AttachOxygenTank {
        displayName = "Disconnect Oxygen from Self-Inflating Bag";//CSTRING(auscultateLung_display);
        displayNameProgress = "Disconnecting Oxygen";//CSTRING(listening_progress);
        treatmentTime = 3;
        consumeItem = 0;
        condition = QUOTE((_patient call ACEFUNC(medical_treatment,isInMedicalFacility) || _patient call ACEFUNC(medical_treatment,isInMedicalVehicle)) && !([_patient] call ace_common_fnc_isAwake) && !(_patient getVariable [ARR_2(QQGVAR(BVMInUse),false)]) && _patient getVariable [ARR_2(QQGVAR(oxygenTankConnected),false)]);
        callbackSuccess = QUOTE([ARR_2(_patient,false)] call FUNC(connectOxygenTank));
    };
};
