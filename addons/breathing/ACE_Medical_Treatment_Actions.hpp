class ACE_Medical_Treatment_Actions {
    class CheckPulse;
    class Pulseoximeter {
        displayName = CSTRING(Pulseoximeter_Display);
        displayNameProgress = CSTRING(placing);
        category = "examine";
        treatmentLocations = 0;
        allowedSelections[] = {"LeftArm", "RightArm"};
        allowSelfTreatment = 1;
        medicRequired = QGVAR(medLvl_Pulseoximeter);
        treatmentTime = 2;
        items[] = {"kat_Pulseoximeter"};
        condition = "kat_breathing_enable && !(_patient getVariable ['kat_breathing_pulseoximeter', false])";
        callbackSuccess = QFUNC(treatmentAdvanced_pulseoximeter);
        callbackFailure = "";
        callbackProgress = "";
        consumeItem = 1;
        animationPatient = "";
        animationPatientUnconscious = "AinjPpneMstpSnonWrflDnon_rolltoback";
        animationPatientUnconsciousExcludeOn[] = {"ainjppnemstpsnonwrfldnon"};
        animationMedic = "AinvPknlMstpSlayWrflDnon_medicOther";
        animationMedicProne = "AinvPpneMstpSlayW[wpn]Dnon_medicOther";
        animationMedicSelf = "AinvPknlMstpSlayW[wpn]Dnon_medic";
        animationMedicSelfProne = "AinvPpneMstpSlayW[wpn]Dnon_medic";
        litter[] = {};
    };
    class RemovePulseoximeter {
        displayName = CSTRING(Pulseoximeter_Display_Remove);
        displayNameProgress = CSTRING(remove);
        category = "examine";
        treatmentLocations = 0;
        allowedSelections[] = {"LeftArm", "RightArm"};
        allowSelfTreatment = 1;
        medicRequired = QGVAR(medLvl_Pulseoximeter);
        treatmentTime = 2;
        items[] = {};
        condition = QUOTE(_patient getVariable [ARR_2(QQGVAR(pulseoximeter), false)]);
        callbackSuccess = QFUNC(treatmentAdvanced_removePulseoximeter);
        callbackFailure = "";
        callbackProgress = "";
        consumeItem = 0;
        animationPatient = "";
        animationPatientUnconscious = "AinjPpneMstpSnonWrflDnon_rolltoback";
        animationPatientUnconsciousExcludeOn[] = {"ainjppnemstpsnonwrfldnon"};
        animationMedic = "AinvPknlMstpSlayWrflDnon_medicOther";
        animationMedicProne = "AinvPpneMstpSlayW[wpn]Dnon_medicOther";
        animationMedicSelf = "AinvPknlMstpSlayW[wpn]Dnon_medic";
        animationMedicSelfProne = "AinvPpneMstpSlayW[wpn]Dnon_medic";
        litter[] = {};
    };
    class ChestSeal {
        displayName = CSTRING(chestseal_display);
        displayNameProgress = CSTRING(treating);
        category = "airway";
        treatmentLocations = 0;
        allowedSelections[] = {"Body"};
        allowSelfTreatment = QGVAR(enable_selfChestseal);
        medicRequired = QGVAR(medLvl_Chestseal);
        treatmentTime = 7;
        items[] = {"kat_chestSeal"};
        condition = QUOTE(!(_patient getVariable [ARR_2(QQEGVAR(airway,recovery),false)]));
        callbackSuccess = QFUNC(treatmentAdvanced_chestSeal);
        callbackFailure = "";
        callbackProgress = "";
        consumeItem = 1;
        animationPatient = "";
        animationPatientUnconscious = "AinjPpneMstpSnonWrflDnon_rolltoback";
        animationPatientUnconsciousExcludeOn[] = {"ainjppnemstpsnonwrfldnon"};
        animationMedic = "AinvPknlMstpSlayWrflDnon_medicOther";
        animationMedicProne = "AinvPpneMstpSlayW[wpn]Dnon_medicOther";
        animationMedicSelf = "AinvPknlMstpSlayW[wpn]Dnon_medic";
        animationMedicSelfProne = "AinvPpneMstpSlayW[wpn]Dnon_medic";
        litter[] = {};
    };
    class HemopneumothoraxTreatment {
        displayName = CSTRING(hemopneumothorax_display);
        displayNameProgress = CSTRING(treating);
        category = "airway";
        treatmentLocations = 0;
        allowedSelections[] = {"Body"};
        allowSelfTreatment = 0;
        medicRequired = QGVAR(medLvl_hemopneumothoraxTreatment);
        treatmentTime = 7;
        items[] = {"kat_aatKit"};
        condition = QUOTE(!(_patient getVariable [ARR_2(QQEGVAR(airway,recovery),false)]));
        callbackSuccess = QFUNC(treatmentAdvanced_hemopneumothorax);
        callbackFailure = "";
        callbackProgress = "";
        consumeItem = 1;
        animationPatient = "";
        animationPatientUnconscious = "AinjPpneMstpSnonWrflDnon_rolltoback";
        animationPatientUnconsciousExcludeOn[] = {"ainjppnemstpsnonwrfldnon"};
        animationMedic = "AinvPknlMstpSlayWrflDnon_medicOther";
        animationMedicProne = "AinvPpneMstpSlayW[wpn]Dnon_medicOther";
        animationMedicSelf = "AinvPknlMstpSlayW[wpn]Dnon_medic";
        animationMedicSelfProne = "AinvPpneMstpSlayW[wpn]Dnon_medic";
        litter[] = {};
    };
    class TensionpneumothoraxTreatment {
        displayName = CSTRING(tensionpneumothorax_display);
        displayNameProgress = CSTRING(treating);
        category = "airway";
        treatmentLocations = 0;
        allowedSelections[] = {"Body"};
        allowSelfTreatment = 0;
        medicRequired = QGVAR(medLvl_hemopneumothoraxTreatment);
        treatmentTime = 7;
        items[] = {"kat_aatKit"};
        condition = QUOTE(!(_patient getVariable [ARR_2(QQEGVAR(airway,recovery),false)]));
        callbackSuccess = QFUNC(treatmentAdvanced_tensionpneumothorax);
        callbackFailure = "";
        callbackProgress = "";
        consumeItem = 1;
        animationPatient = "";
        animationPatientUnconscious = "AinjPpneMstpSnonWrflDnon_rolltoback";
        animationPatientUnconsciousExcludeOn[] = {"ainjppnemstpsnonwrfldnon"};
        animationMedic = "AinvPknlMstpSlayWrflDnon_medicOther";
        animationMedicProne = "AinvPpneMstpSlayW[wpn]Dnon_medicOther";
        animationMedicSelf = "AinvPknlMstpSlayW[wpn]Dnon_medic";
        animationMedicSelfProne = "AinvPpneMstpSlayW[wpn]Dnon_medic";
        litter[] = {};
    };
    class ncdKit: TensionpneumothoraxTreatment {
        displayName = CSTRING(tensionpneumothoraxNCDKit_display);
        displayNameProgress = CSTRING(treating);
        category = "airway";
        treatmentLocations = 0;
        allowedSelections[] = {"Body"};
        allowSelfTreatment = 0;
        medicRequired = QGVAR(medLvl_hemopneumothoraxTreatment);
        treatmentTime = 7;
        items[] = {"kat_ncdKit"};
        condition = QUOTE(!(_patient getVariable [ARR_2(QQEGVAR(airway,recovery),false)]));
        callbackSuccess = QFUNC(treatmentAdvanced_tensionpneumothorax);
        callbackFailure = "";
        callbackProgress = "";
        consumeItem = 1;
        animationPatient = "";
        animationPatientUnconscious = "AinjPpneMstpSnonWrflDnon_rolltoback";
        animationPatientUnconsciousExcludeOn[] = {"ainjppnemstpsnonwrfldnon"};
        animationMedic = "AinvPknlMstpSlayWrflDnon_medicOther";
        animationMedicProne = "AinvPpneMstpSlayW[wpn]Dnon_medicOther";
        animationMedicSelf = "AinvPknlMstpSlayW[wpn]Dnon_medic";
        animationMedicSelfProne = "AinvPpneMstpSlayW[wpn]Dnon_medic";
        litter[] = {};
    };
    class listentolungs: CheckPulse {
        displayName = CSTRING(auscultateLung_display);
        displayNameProgress = CSTRING(listening_progress);
        treatmentTime = 14;
        allowedSelections[] = {"Body"};
        allowSelfTreatment = 0;
        category = "airway";
        medicRequired = 0;
        consumeItem = 0;
        callbackStart = QUOTE([ARR_2(_medic, _patient)] spawn FUNC(listenLungs));
        callbackSuccess = "";
        callbackProgress = "";
        condition = "true";
        items[] = {"kat_stethoscope"};
        animationPatient = "";
        animationPatientUnconscious = "AinjPpneMstpSnonWrflDnon_rolltoback";
        animationPatientUnconsciousExcludeOn[] = {"ainjppnemstpsnonwrfldnon"};
    };
    class CheckCyanosis: CheckPulse {
        displayName = CSTRING(CheckCyanosis_Name);
        displayNameProgress = CSTRING(CheckCyanosis_Progress);
        treatmentTime = 3;
        allowedSelections[] = {"Head", "LeftArm", "RightArm"};
        allowSelfTreatment = 1;
        medicRequired = QGVAR(medLvl_Cyanosis);
        condition = QUOTE(GVAR(enableCyanosis) && !(GVAR(cyanosisShowInMenu)));
        callbackSuccess = QFUNC(treatmentAdvanced_Cyanosis);
    };

    class UseBVM {
        displayName = "Use BVM";//CSTRING(auscultateLung_display);
        displayNameProgress = "Using BVM";//CSTRING(listening_progress);
        category = "airway";
        treatmentLocations = 0;
        allowedSelections[] = {"Head"};
        allowSelfTreatment = 0;
        medicRequired = 0;
        treatmentTime = 15;
        consumeItem = 0;
        items[] = {"kat_BVM"};
        condition = QUOTE(_patient call FUNC(canUseBVM));
        callbackStart = QUOTE([ARR_2(_medic, _patient)] call FUNC(useBVM); _patient setVariable [ARR_3(QQGVAR(BVMInUse), true, true)]);
        callbackSuccess = QUOTE(_patient setVariable [ARR_3(QQGVAR(BVMInUse), false, true)]);
        callbackFailure = QUOTE(_patient setVariable [ARR_3(QQGVAR(BVMInUse), false, true)]);
        callbackProgress = "";
        animationPatient = "";
        animationPatientUnconscious = "AinjPpneMstpSnonWrflDnon_rolltoback";
        animationPatientUnconsciousExcludeOn[] = {"ainjppnemstpsnonwrfldnon"};
        animationMedic = "AinvPknlMstpSnonWnonDr_medic0";
        animationMedicProne = "AinvPknlMstpSnonWnonDr_medic0";
        litter[] = {};
        icon = QPATHTOF(ui\BVM_ui.paa);
    };
    class UsePocketBVM: UseBVM {
        displayName = "Use Pocket BVM";//CSTRING(auscultateLung_display);
        displayNameProgress = "Using Pocket BVM";//CSTRING(listening_progress);
        medicRequired = 0;
        items[] = {"kat_pocketBVM"};
        condition = QUOTE(_patient call FUNC(canUseBVM));
        callbackStart = QUOTE([ARR_4(_medic, _patient, true, false)] call FUNC(useBVM); _patient setVariable [ARR_3(QQGVAR(BVMInUse), true, true)]);
        callbackSuccess = QUOTE(_patient setVariable [ARR_3(QQGVAR(BVMInUse), false, true)]);
        callbackFailure = QUOTE(_patient setVariable [ARR_3(QQGVAR(BVMInUse), false, true)]);
    };
    class UseBVMPortableOxygen: UseBVM {
        displayName = "Use BVM with Oxygen Tank";//CSTRING(auscultateLung_display);
        displayNameProgress = "Using BVM with Oxygen Tank";//CSTRING(listening_progress);
        medicRequired = 0;
        items[] = {"kat_BVM"};
        condition = QUOTE(_patient call FUNC(canUseBVM) && _medic call FUNC(hasOxygenTank) && !(_patient call ACEFUNC(medical_treatment,isInMedicalFacility) || _patient call ACEFUNC(medical_treatment,isInMedicalVehicle)));
        callbackStart = QUOTE([ARR_5(_medic, _patient, false, true, true)] call FUNC(useBVM); _patient setVariable [ARR_3(QQGVAR(BVMInUse), true, true)]);
        callbackSuccess = QUOTE(_patient setVariable [ARR_3(QQGVAR(BVMInUse), false, true)]);
        callbackFailure = QUOTE(_patient setVariable [ARR_3(QQGVAR(BVMInUse), false, true)]);
    };
    class UseBVMOxygen: UseBVM {
        displayName = "Use BVM with Oxygen";//CSTRING(auscultateLung_display);
        displayNameProgress = "Using BVM with Oxygen";//CSTRING(listening_progress);
        medicRequired = 0;
        items[] = {"kat_BVM"};
        condition = QUOTE(_patient call FUNC(canUseBVM) && (_patient call ACEFUNC(medical_treatment,isInMedicalFacility) || _patient call ACEFUNC(medical_treatment,isInMedicalVehicle)));
        callbackStart = QUOTE([ARR_4(_medic, _patient, false, true)] call FUNC(useBVM); _patient setVariable [ARR_3(QQGVAR(BVMInUse), true, true)]);
        callbackSuccess = QUOTE(_patient setVariable [ARR_3(QQGVAR(BVMInUse), false, true)]);
        callbackFailure = QUOTE(_patient setVariable [ARR_3(QQGVAR(BVMInUse), false, true)]);
    };
};
